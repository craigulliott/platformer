# TypeProf 0.21.7

# Classes
module Platformer
  module ClassMap

    def self.subclasses: (singleton(Object) base_class) -> Array[singleton(Object)]
    def self.has_subclasses?: (singleton(Object) base_class) -> boolean
    def self.no_subclasses?: (singleton(Object) base_class) -> boolean
    def self.create_class: (String full_name, singleton(Object) base_class) -> singleton(Object)

    private

    def self.namespace_from_class_name: (String provided_class) -> singleton(Object)
    def self.class_is_still_defined?: (singleton(Object) base_class) -> boolean

    class ClassDoesNotExtendError < StandardError
    end

    class ApplicationRecordAlreadyExistsError < StandardError
    end

    class ActiveRecordClassAlreadyCreatedError < StandardError
    end

    class ActiveRecordClassDoesNotExistError < StandardError
    end
  end
end
